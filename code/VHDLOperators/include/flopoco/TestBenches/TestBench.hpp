#ifndef __TESTBENCH_HPP
#define __TESTBENCH_HPP

/**
 * Creates a TestBench, which tests a certain Operator.
 * The test cases are generated by the unit under test (UUT).
 */

#include "flopoco/InterfacedOperator.hpp"
namespace flopoco{

	class TestBench : public Operator
	{
	public:
		/**
		 * Creates a TestBench.
		 * @param target The target architecture
		 * @param op The operator which is the UUT
		 * @param n Number of tests
		 */
		TestBench(Target *target, Operator *op, int64_t n, bool fromFile = false);

		/** Destructor */
		~TestBench();

		/** Method belonging to the Operator class overloaded by the TestBench class
		 * @param[in,out] o     the stream where the current architecture will be outputed to
		 * @param[in]     name  the name of the entity corresponding to the architecture generated in this method
		 **/
		void outputVHDL(ostream& o, string name);

		/** Produces the VHDL for one assertion, this is a common factor in generateTestFromFile and generateTestInVHDL   */
		string oneTestVHDL(Signal* s, string prepend);

		/** Generating the tests using a file to store the IO, allow to have a lot of IOs without
		 * increasing the VHDL compilation time
		 */
		void generateTestFromFile();


		/** Generating the tests using a the vhdl code to store the IO,
		 * Strongly increasing the VHDL compilation time with the numbers of IO
		 */
		void generateTestInVhdl();

		/** Return the total simulation time*/
		int getSimulationTime();


		/** Factory method that parses arguments and calls the constructor */
		static OperatorPtr parseArguments(OperatorPtr parentOp, Target *target, vector<string> &args, UserInterface& ui);
		
	private:
		Operator *op; /**< The unit under test UUT */
		int64_t       n;   /**< The parameter from the constructor */
		TestCaseList tcl; /**< Test case list */
		int simulationTime; /**< Total simulation time */
		bool fromFile; /**< Flag for external file I/O */
		bool hasFPOutputs;
		bool hasIEEEOutputs;
	};

}
#endif

