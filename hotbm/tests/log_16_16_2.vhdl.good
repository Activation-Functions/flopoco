--------------------------------------------------------------------------------
--------------------------------------------------------------------------------
-- HOTBM instance for function log2(1+x).
-- wI = 16; wO = 16.
-- Order-2 polynomial approximation.
-- Decomposition:
--   alpha = 6; beta = 10;
--   T_0 (ROM):     alpha_0 = 6; beta_0 = 0;
--   T_1 (PowMult): alpha_1 = 6; beta_1 = 10;
--   T_2 (ROM):     alpha_2 = 2; beta_2 = 6.
-- Guard bits: g = 3.
-- Command line: log 16 16 2   6   rom 6 0   powmult 6 10  adhoc 10 10  1 0  6 10   rom 2 6


--------------------------------------------------------------------------------
-- TermROM instance for order-0 term.
-- Decomposition:
--   alpha_0 = 6; beta_0 = 0; wO_0 = 19.

library ieee;
use ieee.std_logic_1164.all;
use ieee.std_logic_arith.all;
use ieee.std_logic_unsigned.all;

entity log_16_16_2_t0 is
  port ( a : in  std_logic_vector(5 downto 0);
         r : out std_logic_vector(19 downto 0) );
end entity;

architecture arch of log_16_16_2_t0 is
  signal x0   : std_logic_vector(5 downto 0);
  signal r0   : std_logic_vector(18 downto 0);
begin
  x0 <= a;

  with x0 select
    r0 <= "0000001011011111011" when "000000", -- t[0] = 5883
          "0000100010001110000" when "000001", -- t[1] = 17520
          "0000111000100110101" when "000010", -- t[2] = 28981
          "0001001110101001111" when "000011", -- t[3] = 40271
          "0001100100011000011" when "000100", -- t[4] = 51395
          "0001111001110010110" when "000101", -- t[5] = 62358
          "0010001110111001100" when "000110", -- t[6] = 73164
          "0010100011101101010" when "000111", -- t[7] = 83818
          "0010111000001110100" when "001000", -- t[8] = 94324
          "0011001100011101110" when "001001", -- t[9] = 104686
          "0011100000011011100" when "001010", -- t[10] = 114908
          "0011110100001000010" when "001011", -- t[11] = 124994
          "0100000111100100011" when "001100", -- t[12] = 134947
          "0100011010110000010" when "001101", -- t[13] = 144770
          "0100101101101100100" when "001110", -- t[14] = 154468
          "0101000000011001011" when "001111", -- t[15] = 164043
          "0101010010110110110" when "010000", -- t[16] = 173494
          "0101100101000110001" when "010001", -- t[17] = 182833
          "0101110111000111001" when "010010", -- t[18] = 192057
          "0110001000111010011" when "010011", -- t[19] = 201171
          "0110011010100000000" when "010100", -- t[20] = 210176
          "0110101011111000011" when "010101", -- t[21] = 219075
          "0110111101000011110" when "010110", -- t[22] = 227870
          "0111001110000010101" when "010111", -- t[23] = 236565
          "0111011110110101001" when "011000", -- t[24] = 245161
          "0111101111011011100" when "011001", -- t[25] = 253660
          "0111111111110110000" when "011010", -- t[26] = 262064
          "1000010000000101000" when "011011", -- t[27] = 270376
          "1000100000001000110" when "011100", -- t[28] = 278598
          "1000110000000001100" when "011101", -- t[29] = 286732
          "1000111111101111011" when "011110", -- t[30] = 294779
          "1001001111010010101" when "011111", -- t[31] = 302741
          "1001011110101011010" when "100000", -- t[32] = 310618
          "1001101101111010000" when "100001", -- t[33] = 318416
          "1001111100111110111" when "100010", -- t[34] = 326135
          "1010001011111001111" when "100011", -- t[35] = 333775
          "1010011010101011011" when "100100", -- t[36] = 341339
          "1010101001010011100" when "100101", -- t[37] = 348828
          "1010110111110010100" when "100110", -- t[38] = 356244
          "1011000110001000100" when "100111", -- t[39] = 363588
          "1011010100010101101" when "101000", -- t[40] = 370861
          "1011100010011010001" when "101001", -- t[41] = 378065
          "1011110000010110001" when "101010", -- t[42] = 385201
          "1011111110001001110" when "101011", -- t[43] = 392270
          "1100001011110101010" when "101100", -- t[44] = 399274
          "1100011001011000101" when "101101", -- t[45] = 406213
          "1100100110110100010" when "101110", -- t[46] = 413090
          "1100110100001000000" when "101111", -- t[47] = 419904
          "1101000001010100000" when "110000", -- t[48] = 426656
          "1101001110011000110" when "110001", -- t[49] = 433350
          "1101011011010110001" when "110010", -- t[50] = 439985
          "1101101000001100011" when "110011", -- t[51] = 446563
          "1101110100111011100" when "110100", -- t[52] = 453084
          "1110000001100011101" when "110101", -- t[53] = 459549
          "1110001110000100111" when "110110", -- t[54] = 465959
          "1110011010011111011" when "110111", -- t[55] = 472315
          "1110100110110011010" when "111000", -- t[56] = 478618
          "1110110011000000110" when "111001", -- t[57] = 484870
          "1110111111000111110" when "111010", -- t[58] = 491070
          "1111001011001000011" when "111011", -- t[59] = 497219
          "1111010111000010111" when "111100", -- t[60] = 503319
          "1111100010110111011" when "111101", -- t[61] = 509371
          "1111101110100101110" when "111110", -- t[62] = 515374
          "1111111010001110010" when "111111", -- t[63] = 521330
          "-------------------" when others;

  r(18 downto 0) <= r0;
  r(19 downto 19) <= (19 downto 19 => ('0'));
end architecture;


--------------------------------------------------------------------------------
-- PowerAdHoc instance for order-1 powering unit.
-- Decomposition:
--   beta_1 = 10; mu_1 = 10; lambda_1 = 10.

library ieee;
use ieee.std_logic_1164.all;
use ieee.std_logic_arith.all;
use ieee.std_logic_unsigned.all;

entity log_16_16_2_t1_pow is
  port ( x : in  std_logic_vector(8 downto 0);
         r : out std_logic_vector(9 downto 0) );
end entity;

architecture arch of log_16_16_2_t1_pow is
  signal pp0 : std_logic_vector(8 downto 0);
  signal r0 : std_logic_vector(8 downto 0);
begin
  pp0(8) <= x(8);

  pp0(7) <= x(7);

  pp0(6) <= x(6);

  pp0(5) <= x(5);

  pp0(4) <= x(4);

  pp0(3) <= x(3);

  pp0(2) <= x(2);

  pp0(1) <= x(1);

  pp0(0) <= x(0);

  r0 <= pp0;
  r <= "1" & r0(8 downto 0);
end architecture;


--------------------------------------------------------------------------------
-- TermPowMult::Table instance for order-1 term Q_1.
-- Decomposition:
--   alpha_1,1 = 6; wO_1,1 = 13.

library ieee;
use ieee.std_logic_1164.all;
use ieee.std_logic_arith.all;
use ieee.std_logic_unsigned.all;

entity log_16_16_2_t1_t1 is
  port ( a : in  std_logic_vector(5 downto 0);
         r : out std_logic_vector(12 downto 0) );
end entity;

architecture arch of log_16_16_2_t1_t1 is
  signal x : std_logic_vector(5 downto 0);
begin
  x <= a;

  with x select
    r <= "1011011101000" when "000000", -- t[0] = 5864
         "1011010001110" when "000001", -- t[1] = 5774
         "1011000110111" when "000010", -- t[2] = 5687
         "1010111100011" when "000011", -- t[3] = 5603
         "1010110010001" when "000100", -- t[4] = 5521
         "1010101000010" when "000101", -- t[5] = 5442
         "1010011110101" when "000110", -- t[6] = 5365
         "1010010101010" when "000111", -- t[7] = 5290
         "1010001100001" when "001000", -- t[8] = 5217
         "1010000011010" when "001001", -- t[9] = 5146
         "1001111010101" when "001010", -- t[10] = 5077
         "1001110010001" when "001011", -- t[11] = 5009
         "1001101010000" when "001100", -- t[12] = 4944
         "1001100010000" when "001101", -- t[13] = 4880
         "1001011010010" when "001110", -- t[14] = 4818
         "1001010010101" when "001111", -- t[15] = 4757
         "1001001011010" when "010000", -- t[16] = 4698
         "1001000100000" when "010001", -- t[17] = 4640
         "1000111101000" when "010010", -- t[18] = 4584
         "1000110110001" when "010011", -- t[19] = 4529
         "1000101111100" when "010100", -- t[20] = 4476
         "1000101000111" when "010101", -- t[21] = 4423
         "1000100010100" when "010110", -- t[22] = 4372
         "1000011100010" when "010111", -- t[23] = 4322
         "1000010110001" when "011000", -- t[24] = 4273
         "1000010000010" when "011001", -- t[25] = 4226
         "1000001010011" when "011010", -- t[26] = 4179
         "1000000100101" when "011011", -- t[27] = 4133
         "0111111111001" when "011100", -- t[28] = 4089
         "0111111001101" when "011101", -- t[29] = 4045
         "0111110100010" when "011110", -- t[30] = 4002
         "0111101111000" when "011111", -- t[31] = 3960
         "0111101001111" when "100000", -- t[32] = 3919
         "0111100100111" when "100001", -- t[33] = 3879
         "0111100000000" when "100010", -- t[34] = 3840
         "0111011011001" when "100011", -- t[35] = 3801
         "0111010110011" when "100100", -- t[36] = 3763
         "0111010001110" when "100101", -- t[37] = 3726
         "0111001101010" when "100110", -- t[38] = 3690
         "0111001000110" when "100111", -- t[39] = 3654
         "0111000100011" when "101000", -- t[40] = 3619
         "0111000000001" when "101001", -- t[41] = 3585
         "0110111011111" when "101010", -- t[42] = 3551
         "0110110111110" when "101011", -- t[43] = 3518
         "0110110011110" when "101100", -- t[44] = 3486
         "0110101111110" when "101101", -- t[45] = 3454
         "0110101011111" when "101110", -- t[46] = 3423
         "0110101000000" when "101111", -- t[47] = 3392
         "0110100100010" when "110000", -- t[48] = 3362
         "0110100000100" when "110001", -- t[49] = 3332
         "0110011100111" when "110010", -- t[50] = 3303
         "0110011001010" when "110011", -- t[51] = 3274
         "0110010101110" when "110100", -- t[52] = 3246
         "0110010010011" when "110101", -- t[53] = 3219
         "0110001111000" when "110110", -- t[54] = 3192
         "0110001011101" when "110111", -- t[55] = 3165
         "0110001000011" when "111000", -- t[56] = 3139
         "0110000101001" when "111001", -- t[57] = 3113
         "0110000001111" when "111010", -- t[58] = 3087
         "0101111110110" when "111011", -- t[59] = 3062
         "0101111011110" when "111100", -- t[60] = 3038
         "0101111000110" when "111101", -- t[61] = 3014
         "0101110101110" when "111110", -- t[62] = 2990
         "0101110010110" when "111111", -- t[63] = 2966
         "-------------" when others;
end architecture;


--------------------------------------------------------------------------------
-- TermPowMult instance for order-1 term.
-- Decomposition:
--   alpha_1 = 6; beta_1 = 10; lambda_1 = 10;  m_1 = 1;
--   Pow   (AdHoc);
--   Q_1,1 (Mult): alpha_1,1 = 6; rho_1,1 = 0; sigma_1,1 = 10; wO_1,1 = 13.

library ieee;
use ieee.std_logic_1164.all;
use ieee.std_logic_arith.all;
use ieee.std_logic_unsigned.all;

entity log_16_16_2_t1 is
  port ( a : in  std_logic_vector(5 downto 0);
         b : in  std_logic_vector(9 downto 0);
         r : out std_logic_vector(19 downto 0) );
end entity;

architecture arch of log_16_16_2_t1 is
  signal sign   : std_logic;
  signal b0     : std_logic_vector(8 downto 0);
  signal s      : std_logic_vector(9 downto 0);
  component log_16_16_2_t1_pow is
    port ( x : in  std_logic_vector(8 downto 0);
           r : out std_logic_vector(9 downto 0) );
  end component;

  signal a_1    : std_logic_vector(5 downto 0);
  signal sign_1 : std_logic;
  signal s_1    : std_logic_vector(8 downto 0);
  signal k_1    : std_logic_vector(12 downto 0);
  signal r0_1   : std_logic_vector(22 downto 0);
  signal r_1    : std_logic_vector(19 downto 0);
  component log_16_16_2_t1_t1 is
    port ( a : in  std_logic_vector(5 downto 0);
           r : out std_logic_vector(12 downto 0) );
  end component;
begin
  sign <= not b(9);
  b0 <= b(8 downto 0) xor (8 downto 0 => sign);

  pow : log_16_16_2_t1_pow
    port map ( x => b0,
               r => s );

  a_1 <= a(5 downto 0);
  sign_1 <= not s(9);
  s_1 <= s(8 downto 0) xor (8 downto 0 => sign_1);
  t_1 : log_16_16_2_t1_t1
    port map ( a => a_1,
               r => k_1 );
  r0_1 <= k_1 * (s_1 & "1");
  r_1(12 downto 0) <=
    r0_1(22 downto 10) xor (22 downto 10 => ((sign xor sign_1)));
  r_1(19 downto 13) <= (19 downto 13 => ((sign xor sign_1)));

  r <= r_1;
end architecture;


--------------------------------------------------------------------------------
-- TermROM instance for order-2 term.
-- Decomposition:
--   alpha_2 = 2; beta_2 = 6 (1+5); wO_2 = 5.

library ieee;
use ieee.std_logic_1164.all;
use ieee.std_logic_arith.all;
use ieee.std_logic_unsigned.all;

entity log_16_16_2_t2 is
  port ( a : in  std_logic_vector(1 downto 0);
         b : in  std_logic_vector(5 downto 0);
         r : out std_logic_vector(19 downto 0) );
end entity;

architecture arch of log_16_16_2_t2 is
  signal sign : std_logic;
  signal b0   : std_logic_vector(4 downto 0);
  signal x0   : std_logic_vector(6 downto 0);
  signal r0   : std_logic_vector(4 downto 0);
begin
  sign <= not b(5);
  b0 <= b(4 downto 0) xor (4 downto 0 => sign);
  x0 <= a & b0;

  with x0 select
    r0 <= "11111" when "0000000", -- t[0] = -1
          "11111" when "0000001", -- t[1] = -1
          "11111" when "0000010", -- t[2] = -1
          "11111" when "0000011", -- t[3] = -1
          "11111" when "0000100", -- t[4] = -1
          "11111" when "0000101", -- t[5] = -1
          "11111" when "0000110", -- t[6] = -1
          "11110" when "0000111", -- t[7] = -2
          "11110" when "0001000", -- t[8] = -2
          "11110" when "0001001", -- t[9] = -2
          "11101" when "0001010", -- t[10] = -3
          "11101" when "0001011", -- t[11] = -3
          "11101" when "0001100", -- t[12] = -3
          "11100" when "0001101", -- t[13] = -4
          "11100" when "0001110", -- t[14] = -4
          "11011" when "0001111", -- t[15] = -5
          "11010" when "0010000", -- t[16] = -6
          "11010" when "0010001", -- t[17] = -6
          "11001" when "0010010", -- t[18] = -7
          "11000" when "0010011", -- t[19] = -8
          "11000" when "0010100", -- t[20] = -8
          "10111" when "0010101", -- t[21] = -9
          "10110" when "0010110", -- t[22] = -10
          "10101" when "0010111", -- t[23] = -11
          "10100" when "0011000", -- t[24] = -12
          "10100" when "0011001", -- t[25] = -12
          "10011" when "0011010", -- t[26] = -13
          "10010" when "0011011", -- t[27] = -14
          "10001" when "0011100", -- t[28] = -15
          "01111" when "0011101", -- t[29] = -17
          "01110" when "0011110", -- t[30] = -18
          "01101" when "0011111", -- t[31] = -19
          "11111" when "0100000", -- t[32] = -1
          "11111" when "0100001", -- t[33] = -1
          "11111" when "0100010", -- t[34] = -1
          "11111" when "0100011", -- t[35] = -1
          "11111" when "0100100", -- t[36] = -1
          "11111" when "0100101", -- t[37] = -1
          "11111" when "0100110", -- t[38] = -1
          "11111" when "0100111", -- t[39] = -1
          "11111" when "0101000", -- t[40] = -1
          "11110" when "0101001", -- t[41] = -2
          "11110" when "0101010", -- t[42] = -2
          "11110" when "0101011", -- t[43] = -2
          "11110" when "0101100", -- t[44] = -2
          "11101" when "0101101", -- t[45] = -3
          "11101" when "0101110", -- t[46] = -3
          "11101" when "0101111", -- t[47] = -3
          "11100" when "0110000", -- t[48] = -4
          "11100" when "0110001", -- t[49] = -4
          "11011" when "0110010", -- t[50] = -5
          "11011" when "0110011", -- t[51] = -5
          "11010" when "0110100", -- t[52] = -6
          "11010" when "0110101", -- t[53] = -6
          "11001" when "0110110", -- t[54] = -7
          "11001" when "0110111", -- t[55] = -7
          "11000" when "0111000", -- t[56] = -8
          "11000" when "0111001", -- t[57] = -8
          "10111" when "0111010", -- t[58] = -9
          "10110" when "0111011", -- t[59] = -10
          "10110" when "0111100", -- t[60] = -10
          "10101" when "0111101", -- t[61] = -11
          "10100" when "0111110", -- t[62] = -12
          "10011" when "0111111", -- t[63] = -13
          "11111" when "1000000", -- t[64] = -1
          "11111" when "1000001", -- t[65] = -1
          "11111" when "1000010", -- t[66] = -1
          "11111" when "1000011", -- t[67] = -1
          "11111" when "1000100", -- t[68] = -1
          "11111" when "1000101", -- t[69] = -1
          "11111" when "1000110", -- t[70] = -1
          "11111" when "1000111", -- t[71] = -1
          "11111" when "1001000", -- t[72] = -1
          "11111" when "1001001", -- t[73] = -1
          "11111" when "1001010", -- t[74] = -1
          "11110" when "1001011", -- t[75] = -2
          "11110" when "1001100", -- t[76] = -2
          "11110" when "1001101", -- t[77] = -2
          "11110" when "1001110", -- t[78] = -2
          "11101" when "1001111", -- t[79] = -3
          "11101" when "1010000", -- t[80] = -3
          "11101" when "1010001", -- t[81] = -3
          "11101" when "1010010", -- t[82] = -3
          "11100" when "1010011", -- t[83] = -4
          "11100" when "1010100", -- t[84] = -4
          "11011" when "1010101", -- t[85] = -5
          "11011" when "1010110", -- t[86] = -5
          "11011" when "1010111", -- t[87] = -5
          "11010" when "1011000", -- t[88] = -6
          "11010" when "1011001", -- t[89] = -6
          "11001" when "1011010", -- t[90] = -7
          "11001" when "1011011", -- t[91] = -7
          "11000" when "1011100", -- t[92] = -8
          "11000" when "1011101", -- t[93] = -8
          "10111" when "1011110", -- t[94] = -9
          "10111" when "1011111", -- t[95] = -9
          "11111" when "1100000", -- t[96] = -1
          "11111" when "1100001", -- t[97] = -1
          "11111" when "1100010", -- t[98] = -1
          "11111" when "1100011", -- t[99] = -1
          "11111" when "1100100", -- t[100] = -1
          "11111" when "1100101", -- t[101] = -1
          "11111" when "1100110", -- t[102] = -1
          "11111" when "1100111", -- t[103] = -1
          "11111" when "1101000", -- t[104] = -1
          "11111" when "1101001", -- t[105] = -1
          "11111" when "1101010", -- t[106] = -1
          "11111" when "1101011", -- t[107] = -1
          "11110" when "1101100", -- t[108] = -2
          "11110" when "1101101", -- t[109] = -2
          "11110" when "1101110", -- t[110] = -2
          "11110" when "1101111", -- t[111] = -2
          "11110" when "1110000", -- t[112] = -2
          "11110" when "1110001", -- t[113] = -2
          "11101" when "1110010", -- t[114] = -3
          "11101" when "1110011", -- t[115] = -3
          "11101" when "1110100", -- t[116] = -3
          "11100" when "1110101", -- t[117] = -4
          "11100" when "1110110", -- t[118] = -4
          "11100" when "1110111", -- t[119] = -4
          "11100" when "1111000", -- t[120] = -4
          "11011" when "1111001", -- t[121] = -5
          "11011" when "1111010", -- t[122] = -5
          "11011" when "1111011", -- t[123] = -5
          "11010" when "1111100", -- t[124] = -6
          "11010" when "1111101", -- t[125] = -6
          "11001" when "1111110", -- t[126] = -7
          "11001" when "1111111", -- t[127] = -7
          "-----" when others;

  r(4 downto 0) <= r0;
  r(19 downto 5) <= (19 downto 5 => (not '0'));
end architecture;


--------------------------------------------------------------------------------
-- HOTBM main component.

library ieee;
use ieee.std_logic_1164.all;
use ieee.std_logic_arith.all;
use ieee.std_logic_unsigned.all;

entity log_16_16_2 is
  port ( x : in  std_logic_vector(15 downto 0);
         r : out std_logic_vector(16 downto 0) );
end entity;

architecture arch of log_16_16_2 is
  signal a_0 : std_logic_vector(5 downto 0);
  signal r_0 : std_logic_vector(19 downto 0);
  component log_16_16_2_t0 is
    port ( a : in  std_logic_vector(5 downto 0);
           r : out std_logic_vector(19 downto 0) );
  end component;

  signal a_1 : std_logic_vector(5 downto 0);
  signal b_1 : std_logic_vector(9 downto 0);
  signal r_1 : std_logic_vector(19 downto 0);
  component log_16_16_2_t1 is
    port ( a : in  std_logic_vector(5 downto 0);
           b : in  std_logic_vector(9 downto 0);
           r : out std_logic_vector(19 downto 0) );
  end component;

  signal a_2 : std_logic_vector(1 downto 0);
  signal b_2 : std_logic_vector(5 downto 0);
  signal r_2 : std_logic_vector(19 downto 0);
  component log_16_16_2_t2 is
    port ( a : in  std_logic_vector(1 downto 0);
           b : in  std_logic_vector(5 downto 0);
           r : out std_logic_vector(19 downto 0) );
  end component;

  signal sum : std_logic_vector(19 downto 0);
begin
  a_0 <= x(15 downto 10);
  t_0 : log_16_16_2_t0
    port map ( a => a_0,
               r => r_0 );

  a_1 <= x(15 downto 10);
  b_1 <= x(9 downto 0);
  t_1 : log_16_16_2_t1
    port map ( a => a_1,
               b => b_1,
               r => r_1 );

  a_2 <= x(15 downto 14);
  b_2 <= x(9 downto 4);
  t_2 : log_16_16_2_t2
    port map ( a => a_2,
               b => b_2,
               r => r_2 );

  sum <= r_0 + r_1 + r_2;
  r <= sum(19 downto 3);
end architecture;
