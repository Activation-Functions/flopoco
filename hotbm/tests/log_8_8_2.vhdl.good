--------------------------------------------------------------------------------
--------------------------------------------------------------------------------
-- HOTBM instance for function log2(1+x).
-- wI = 8; wO = 8.
-- Order-2 polynomial approximation.
-- Decomposition:
--   alpha = 5; beta = 3;
--   T_0 (ROM):     alpha_0 = 5; beta_0 = 0;
--   T_1 (ROM):     alpha_1 = 3; beta_1 = 3;
--   T_2 (ROM):     alpha_2 = 0; beta_2 = 1.
-- Guard bits: g = 2.
-- Command line: log 8 8 2   5   rom 5 0   rom 3 3   rom 0 1


--------------------------------------------------------------------------------
-- TermROM instance for order-0 term.
-- Decomposition:
--   alpha_0 = 5; beta_0 = 0; wO_0 = 10.

library ieee;
use ieee.std_logic_1164.all;
use ieee.std_logic_arith.all;
use ieee.std_logic_unsigned.all;

entity log_8_8_2_t0 is
  port ( a : in  std_logic_vector(4 downto 0);
         r : out std_logic_vector(10 downto 0) );
end entity;

architecture arch of log_8_8_2_t0 is
  signal x0   : std_logic_vector(4 downto 0);
  signal r0   : std_logic_vector(9 downto 0);
begin
  x0 <= a;

  with x0 select
    r0 <= "0000010110" when "00000", -- t[0] = 22
          "0001000011" when "00001", -- t[1] = 67
          "0001101111" when "00010", -- t[2] = 111
          "0010011001" when "00011", -- t[3] = 153
          "0011000010" when "00100", -- t[4] = 194
          "0011101010" when "00101", -- t[5] = 234
          "0100010001" when "00110", -- t[6] = 273
          "0100110111" when "00111", -- t[7] = 311
          "0101011100" when "01000", -- t[8] = 348
          "0110000000" when "01001", -- t[9] = 384
          "0110100100" when "01010", -- t[10] = 420
          "0111000110" when "01011", -- t[11] = 454
          "0111101000" when "01100", -- t[12] = 488
          "1000001000" when "01101", -- t[13] = 520
          "1000101001" when "01110", -- t[14] = 553
          "1001001000" when "01111", -- t[15] = 584
          "1001100111" when "10000", -- t[16] = 615
          "1010000101" when "10001", -- t[17] = 645
          "1010100011" when "10010", -- t[18] = 675
          "1011000000" when "10011", -- t[19] = 704
          "1011011100" when "10100", -- t[20] = 732
          "1011111000" when "10101", -- t[21] = 760
          "1100010011" when "10110", -- t[22] = 787
          "1100101110" when "10111", -- t[23] = 814
          "1101001001" when "11000", -- t[24] = 841
          "1101100011" when "11001", -- t[25] = 867
          "1101111100" when "11010", -- t[26] = 892
          "1110010101" when "11011", -- t[27] = 917
          "1110101110" when "11100", -- t[28] = 942
          "1111000110" when "11101", -- t[29] = 966
          "1111011110" when "11110", -- t[30] = 990
          "1111110101" when "11111", -- t[31] = 1013
          "----------" when others;

  r(9 downto 0) <= r0;
  r(10 downto 10) <= (10 downto 10 => ('0'));
end architecture;


--------------------------------------------------------------------------------
-- TermROM instance for order-1 term.
-- Decomposition:
--   alpha_1 = 3; beta_1 = 3 (1+2); wO_1 = 5.

library ieee;
use ieee.std_logic_1164.all;
use ieee.std_logic_arith.all;
use ieee.std_logic_unsigned.all;

entity log_8_8_2_t1 is
  port ( a : in  std_logic_vector(2 downto 0);
         b : in  std_logic_vector(2 downto 0);
         r : out std_logic_vector(10 downto 0) );
end entity;

architecture arch of log_8_8_2_t1 is
  signal sign : std_logic;
  signal b0   : std_logic_vector(1 downto 0);
  signal x0   : std_logic_vector(4 downto 0);
  signal r0   : std_logic_vector(4 downto 0);
begin
  sign <= not b(2);
  b0 <= b(1 downto 0) xor (1 downto 0 => sign);
  x0 <= a & b0;

  with x0 select
    r0 <= "00010" when "00000", -- t[0] = 2
          "01000" when "00001", -- t[1] = 8
          "01101" when "00010", -- t[2] = 13
          "10011" when "00011", -- t[3] = 19
          "00010" when "00100", -- t[4] = 2
          "00111" when "00101", -- t[5] = 7
          "01100" when "00110", -- t[6] = 12
          "10001" when "00111", -- t[7] = 17
          "00010" when "01000", -- t[8] = 2
          "00110" when "01001", -- t[9] = 6
          "01011" when "01010", -- t[10] = 11
          "01111" when "01011", -- t[11] = 15
          "00010" when "01100", -- t[12] = 2
          "00110" when "01101", -- t[13] = 6
          "01010" when "01110", -- t[14] = 10
          "01110" when "01111", -- t[15] = 14
          "00001" when "10000", -- t[16] = 1
          "00101" when "10001", -- t[17] = 5
          "01001" when "10010", -- t[18] = 9
          "01100" when "10011", -- t[19] = 12
          "00001" when "10100", -- t[20] = 1
          "00101" when "10101", -- t[21] = 5
          "01000" when "10110", -- t[22] = 8
          "01011" when "10111", -- t[23] = 11
          "00001" when "11000", -- t[24] = 1
          "00100" when "11001", -- t[25] = 4
          "00111" when "11010", -- t[26] = 7
          "01011" when "11011", -- t[27] = 11
          "00001" when "11100", -- t[28] = 1
          "00100" when "11101", -- t[29] = 4
          "00111" when "11110", -- t[30] = 7
          "01010" when "11111", -- t[31] = 10
          "-----" when others;

  r(4 downto 0) <= r0 xor (4 downto 0 => (sign));
  r(10 downto 5) <= (10 downto 5 => (sign));
end architecture;


--------------------------------------------------------------------------------
-- TermROM instance for order-2 term.
-- Decomposition:
--   alpha_2 = 0; beta_2 = 1 (1+0); wO_2 = 1.

library ieee;
use ieee.std_logic_1164.all;
use ieee.std_logic_arith.all;
use ieee.std_logic_unsigned.all;

entity log_8_8_2_t2 is
  port ( b : in  std_logic_vector(0 downto 0);
         r : out std_logic_vector(10 downto 0) );
end entity;

architecture arch of log_8_8_2_t2 is
  signal sign : std_logic;
  signal r0   : std_logic_vector(0 downto 0);
begin
  sign <= not b(0);

  r0 <= "1"; -- t = -1

  r(0 downto 0) <= r0;
  r(10 downto 1) <= (10 downto 1 => (not '0'));
end architecture;


--------------------------------------------------------------------------------
-- HOTBM main component.

library ieee;
use ieee.std_logic_1164.all;
use ieee.std_logic_arith.all;
use ieee.std_logic_unsigned.all;

entity log_8_8_2 is
  port ( x : in  std_logic_vector(7 downto 0);
         r : out std_logic_vector(8 downto 0) );
end entity;

architecture arch of log_8_8_2 is
  signal a_0 : std_logic_vector(4 downto 0);
  signal r_0 : std_logic_vector(10 downto 0);
  component log_8_8_2_t0 is
    port ( a : in  std_logic_vector(4 downto 0);
           r : out std_logic_vector(10 downto 0) );
  end component;

  signal a_1 : std_logic_vector(2 downto 0);
  signal b_1 : std_logic_vector(2 downto 0);
  signal r_1 : std_logic_vector(10 downto 0);
  component log_8_8_2_t1 is
    port ( a : in  std_logic_vector(2 downto 0);
           b : in  std_logic_vector(2 downto 0);
           r : out std_logic_vector(10 downto 0) );
  end component;

  signal b_2 : std_logic_vector(0 downto 0);
  signal r_2 : std_logic_vector(10 downto 0);
  component log_8_8_2_t2 is
    port ( b : in  std_logic_vector(0 downto 0);
           r : out std_logic_vector(10 downto 0) );
  end component;

  signal sum : std_logic_vector(10 downto 0);
begin
  a_0 <= x(7 downto 3);
  t_0 : log_8_8_2_t0
    port map ( a => a_0,
               r => r_0 );

  a_1 <= x(7 downto 5);
  b_1 <= x(2 downto 0);
  t_1 : log_8_8_2_t1
    port map ( a => a_1,
               b => b_1,
               r => r_1 );

  b_2 <= x(2 downto 2);
  t_2 : log_8_8_2_t2
    port map ( b => b_2,
               r => r_2 );

  sum <= r_0 + r_1 + r_2;
  r <= sum(10 downto 2);
end architecture;
