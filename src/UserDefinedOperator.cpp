// general c++ library for manipulating streams
#include <iostream>
#include <sstream>

// include the header of the Operator
#include "UserDefinedOperator.hpp"

using namespace std;


// personalized parameter
string UserDefinedOperator::operatorInfo = "UserDefinedInfo param0 param1 <options>";

/* constructor of the UserDefinedOperator
  Target is the targeted FPGA : Stratix, Virtex ...
  param0 and param1 are some parameters declared by this Operator developpers, 
  any number can be declared, you will have to modify 
      -> this function,  
      -> the prototype of this function (available in UserDefinedOperator.hpp
      -> the main.cpp lines where the command line arguments are parsed in order to generate this UserDefinedOperator
*/
UserDefinedOperator::UserDefinedOperator(Target* target, int param0, int param1) : Operator(target) {
  /* In this constructor we are going to generate an operator that takes into input three value X,Y,Z of lenght param0, threats them as unsigned integers, sums them and then output the last param1 bit of the sum adding the first bit of the sum (most significant) in front of this output, all the vhdl code needed by this operator has to be generated in this function */

  // definition of the name of the operator
  ostringstream name;
  name << "UserDefinedOperator_" << param0;
  setName(name.str());
  // Copyright 
  setCopyrightString("ACME and Co 2010");

  /* SET UP THE IO SIGNALS
   Each IO signal is declared by addInput(name,n) or addOutput(name,n) where
    name is a string that stands for the name of the variable and n is an integer (int)   that stands for the length of the corresponding input/output */

  // declaring inputs
  addInput ("X" , param0);
  addInput ("Y" , param0);
  addInput ("Z" , param0);
  // declaring output
  addOutput("S" , param1);



  /* Some informations can be given to the flopoco user if  the -verbose option is set, by using the REPORT function : 
      [eg: flopoco -verbose=0 UserDefinedOperator 10 5 ]
   There is three level of details
    -> INFO for basic information ( -verbose=1 )
    -> DETAILED for complete information, includes the INFO level ( -verbose=2 )
    -> DEBUG for complete and debug information, use for getting information during the debug step of operator development, includes the INFO and DETAILED levels ( -verbose=3 )
  */
  REPORT(INFO,"Declaration of UserDefinedOperator \n");
  ostringstream detailedMsg;
  detailedMsg  << "this operator has received two parameters " << param0 << " and " << param1;
  REPORT(DETAILED,detailedMsg.str());
  REPORT(DEBUG,"debug of UserDefinedOperator");



  /* vhdl is the stream which receives all the vhdl code, some special functions are
    available to smooth variable declaration and use ... 
    -> when first using a variable (Eg: T), declare("T",64) will create a vhdl
      definition of the variable : signal T and includes it it the header of the architecture definition of the operator

    Each code transmited to vhdl will be parsed and the variables previously declared in a previous cycle will be delayed automatically by a pipelined register.
  */
  vhdl << declare("T", param0+1) << " <= ('0' & X) + ('O' & Y);" << endl;


  /* declaring a new cycle, each variable used after this line will be delayed 
    with respect to his state in the precedent cycle
  */
  nextCycle();
  vhdl << declare("R",param0+2) << " <=  ('0' & T) + (\"00\" & Z);" << endl;

  /* the use(variable) is a deprecated function, that can still be encoutered 
  in old Flopoco's operator, simply use vhdl << "S" (flopoco will generate the correct delayed value as soon as a previous declare("S") exists */
  // we first put the most significant bit of the result into R
  vhdl << "S <= "<< "(R" << of(param0 +1) << " & ";
  // and then we place the last param1 bits
  vhdl << use("R") << range(param1 - 1,0) << ")" << endl;
};


void UserDefinedOperator::emulate(TestCase * tc) {
  /* This function will be used when the TestBench command is used in the command line
    we have to provide a complete and correct emulation of the operator, in order to compare correct output generated by this function with the test input generated by the vhdl code */

}


void UserDefinedOperator::buildStandardTestCases(TestCaseList * tcl) {
}

void UserDefinedOperator::buildRandomTestCases(TestCaseList *  tcl, int n) {
}
