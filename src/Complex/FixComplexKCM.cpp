// general c++ library for manipulating streams
#include <iostream>
#include <sstream>

#include "gmp.h"
#include "mpfr.h"

// include the header of the Operator
#include "FixComplexKCM.hpp"

using namespace std;
namespace flopoco {

	FixComplexKCM::FixComplexKCM(
			Target* target,
			int msb_in, 
			int lsb_in, 
			int lsb_out,
			string constant
		): 	
			Operator(target),
			msb_in(msb_in),
			lsb_in(lsb_in),
			lsb_out(lsb_out),
			constant(constant)
	{
		if(lsb_in>msb_in) 
		{
			throw string("FixComplexKCM: Error, lsbIn>msbIn");
		}

		// definition of the source file name, used for info and error reporting
		// using REPORT 
		srcFileName="FixComplexKCM";

		// definition of the name of the operator
		ostringstream name;
		name << "FixComplexKCM_" << msb_in <<"_" << lsb_in << "_" << 
			lsb_out << "_" << constant ;

		setName(name.str());
		
		// Copyright 
		setCopyrightString("3IF 2015 dev team (2015)");

		int inputWidth = 1 + msb_in - lsb_in;
		
		// declaring inputs
		addInput ("ReIN" , inputWidth);
		addInput ("ImIN" , inputWidth);

		//Since it's a sum of two products
		int msb_out = 2 * msb_in + 1;
		if(msb_out < lsb_out)
		{
			throw string(
					"FixComplexKCM: Error, the result computed would always be zero (msb_out < lsb_out)");
		}

		int outputWidth = msb_out - lsb_out + 1;

		// declaring output
		addOutput("ReOut", outputWidth);
		addOutput("ImOut", outputWidth);

		// basic message
		REPORT(INFO,"Declaration of FixComplexKCM\n");

		// more detailed message
		ostringstream detailedMsg;
		detailedMsg  << "this operator has received two parameters " << param0 << " and " << param1;
		REPORT(DETAILED,detailedMsg.str());
  
		// debug message for developper
		REPORT(DEBUG,"debug of FixComplexKCM");



		/* vhdl is the stream which receives all the vhdl code, some special
		   functions are
		   available to smooth variable declaration and use ...  -> when first
		   using a variable (Eg: T), declare("T",64) will create a vhdl
		   definition of the variable : signal T and includes it it the header
		   of the architecture definition of the operator

		   Each code transmited to vhdl will be parsed and the variables
		   previously declared in a previous cycle will be delayed automatically
		   by a pipelined register.
		*/
		vhdl << declare("T", param0+1) << " <= ('0' & X) + ('O' & Y);" << endl;


		/* declaring a new cycle, each variable used after this line will be delayed 
		   with respect to his state in the precedent cycle
		*/
		nextCycle();
		vhdl << declare("R",param0+2) << " <=  ('0' & T) + (\"00\" & Z);" << endl;

		/* the use(variable) is a deprecated function, that can still be
		   encoutered 
		   in old Flopoco's operators, simply use vhdl << "S" (flopoco will
		   generate the correct delayed value as soon as a previous declare("S")
		   exists 
		*/
		// we first put the most significant bit of the result into R
		vhdl << "S <= (R" << of(param0 +1) << " & ";
		// and then we place the last param1 bits
		vhdl << "R" << range(param1 - 1,0) << ");" << endl;
	};

	
	void FixComplexKCM::emulate(TestCase * tc) {
		/* This function will be used when the TestBench command is used in the
		   command line
		   we have to provide a complete and correct emulation of the operator,
		   in order to compare correct output generated by this function with
		   the test input generated by the vhdl code 
		*/
		/* first we are going to format the entries */
		mpz_class sx = tc->getInputValue("X");
		mpz_class sy = tc->getInputValue("Y");
		mpz_class sz = tc->getInputValue("Z");

		/* then we are going to manipulate our bit vectors in order to get the
		 * correct output*/
		mpz_class sr;
		mpz_class stmp;
		stmp = sx + sy + sz;
		sr = (stmp % mpzpow2(param1)); // we delete all the bits that do not fit in the range (param1 - 1 downto 0);
		sr += (stmp / mpzpow2 (param0+1)); // we add the first bit

		/* at the end, we indicate to the TestCase object what is the expected
		   output corresponding to the inputs */
		tc->addExpectedOutput("R",sr);
	}


	void FixComplexKCM::buildStandardTestCases(TestCaseList * tcl) {
		// please fill me with regression tests or corner case tests!
	}
}//namespace
