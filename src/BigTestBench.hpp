#ifndef __BIGTESTBENCH_HPP
#define __BIGTESTBENCH_HPP

#include "Operator.hpp"

/**
 * Creates a BigTestBench, which tests a certain Operator.
 * The test cases are generated by the unit under test (UUT).
 */
class BigTestBench : public Operator
{
public:
	/* XXX: To discuss what n represents. */
	/**
	 * Creates a BigTestBench.
	 * @param target The target architecture
	 * @param op The operator which is the UUT
	 * @param n Number of tests
	 */
	BigTestBench(Target *target, Operator *op, int n);
	
	/** Destructor */
	~BigTestBench();

	/** Method belonging to the Operator class overloaded by the Wrapper class
	 * @param[in,out] o     the stream where the current architecture will be outputed to
	 * @param[in]     name  the name of the entity corresponding to the architecture generated in this method
	 **/
	void outputVHDL(ostream& o, string name);
	
	/** Overloaded method which sets the operator name */	
	void setOperatorName();
private:
	/** The unit under test UUT */
	Operator *op_;

	/** The parameter from the constructor */
	int n_;
	
	/**
	 * Offers an ordering relationship on Signal-s based on their name.
	 * Now we can use Signal-s as keys to map, set etc.
	 */
	struct ltsignal
	{
		bool operator()(Signal s1, Signal s2) const
		{
			return (s1.getName() < s2.getName());
		}
	};
};
#endif

