#include <iostream>
#include <math.h>
#include <cstdlib>
#include "../utils.hpp"
#include "PolynomialTable.hpp"
using namespace std;



PolynomialTable::PolynomialTable(Target* target, int wIn, int wOut) : 
   Table(target, wIn, wOut)  
{
	ostringstream name; 
	name <<"InvTable_0_"<<wIn<<"_"<<wOut;
	setName(name.str());

}

PolynomialTable::~PolynomialTable() {}
  

int    PolynomialTable::double2input(double x){
  int result;
  cerr << "??? PolynomialTable::double2input not yet implemented ";
  exit(1);
  return result;
}


double PolynomialTable::input2double(int x) {
  double y;
  cerr << "??? PolynomialTable::double2input not yet implemented ";
  exit(1);
  return(y);
}

mpz_class PolynomialTable::double2output(double x){
  cerr << "??? PolynomialTable::double2input not yet implemented ";
  exit(1);
  return 0;
}

double PolynomialTable::output2double(mpz_class x) {
  double y;
  cerr << "??? PolynomialTable::double2input not yet implemented ";
  exit(1);
  
  return(y);
}


mpz_class PolynomialTable::function(int x)
{
  mpz_class r;
#if 0
  switch(x) {
  
 case 0 : r= 
		  mpz_class(67108864) +( mpz_class(262143) << 27 )+( mpz_class(509) << 45 );
break; 
 case 1 : r= 
67370498 +( 261125 << 27 )+( 503 << 45 );
break; 
 case 2 : r= 
67631120 +( 260119 << 27 )+( 498 << 45 );
break; 
 case 3 : r= 
67890741 +( 259126 << 27 )+( 494 << 45 );
break; 
 case 4 : r= 
68149374 +( 258139 << 27 )+( 485 << 45 );
break; 
 case 5 : r= 
68407028 +( 257168 << 27 )+( 480 << 45 );
break; 
 case 6 : r= 
68663716 +( 256207 << 27 )+( 476 << 45 );
break; 
 case 7 : r= 
68919447 +( 255257 << 27 )+( 470 << 45 );
break; 
 case 8 : r= 
69174234 +( 254315 << 27 )+( 464 << 45 );
break; 
 case 9 : r= 
69428085 +( 253387 << 27 )+( 461 << 45 );
break; 
 case 10 : r= 
69681011 +( 252468 << 27 )+( 456 << 45 );
break; 
 case 11 : r= 
69933023 +( 251557 << 27 )+( 450 << 45 );
break; 
 case 12 : r= 
70184130 +( 250657 << 27 )+( 446 << 45 );
break; 
 case 13 : r= 
70434342 +( 249765 << 27 )+( 440 << 45 );
break; 
 case 14 : r= 
70683667 +( 248887 << 27 )+( 437 << 45 );
break; 
 case 15 : r= 
70932117 +( 248014 << 27 )+( 432 << 45 );
break; 
 case 16 : r= 
71179699 +( 247152 << 27 )+( 428 << 45 );
break; 
 case 17 : r= 
71426423 +( 246299 << 27 )+( 424 << 45 );
break; 
 case 18 : r= 
71672298 +( 245454 << 27 )+( 420 << 45 );
break; 
 case 19 : r= 
71917332 +( 244618 << 27 )+( 416 << 45 );
break; 
 case 20 : r= 
72161535 +( 243787 << 27 )+( 409 << 45 );
break; 
 case 21 : r= 
72404913 +( 242970 << 27 )+( 407 << 45 );
break; 
 case 22 : r= 
72647476 +( 242159 << 27 )+( 403 << 45 );
break; 
 case 23 : r= 
72889232 +( 241356 << 27 )+( 399 << 45 );
break; 
 case 24 : r= 
73130189 +( 240559 << 27 )+( 393 << 45 );
break; 
 case 25 : r= 
73370355 +( 239771 << 27 )+( 390 << 45 );
break; 
 case 26 : r= 
73609736 +( 238994 << 27 )+( 388 << 45 );
break; 
 case 27 : r= 
73848342 +( 238221 << 27 )+( 383 << 45 );
break; 
 case 28 : r= 
74086180 +( 237455 << 27 )+( 379 << 45 );
break; 
 case 29 : r= 
74323256 +( 236698 << 27 )+( 375 << 45 );
break; 
 case 30 : r= 
74559579 +( 235946 << 27 )+( 370 << 45 );
break; 
 case 31 : r= 
74795155 +( 235203 << 27 )+( 367 << 45 );
break; 
 case 32 : r= 
75029991 +( 234468 << 27 )+( 365 << 45 );
break; 
 case 33 : r= 
75264094 +( 233740 << 27 )+( 362 << 45 );
break; 
 case 34 : r= 
75497472 +( 233017 << 27 )+( 359 << 45 );
break; 
 case 35 : r= 
75730130 +( 232302 << 27 )+( 356 << 45 );
break; 
 case 36 : r= 
75962076 +( 231592 << 27 )+( 352 << 45 );
break; 
 case 37 : r= 
76193316 +( 230888 << 27 )+( 348 << 45 );
break; 
 case 38 : r= 
76423856 +( 230191 << 27 )+( 344 << 45 );
break; 
 case 39 : r= 
76653703 +( 229501 << 27 )+( 342 << 45 );
break; 
 case 40 : r= 
76882862 +( 228818 << 27 )+( 339 << 45 );
break; 
 case 41 : r= 
77111341 +( 228140 << 27 )+( 337 << 45 );
break; 
 case 42 : r= 
77339144 +( 227469 << 27 )+( 334 << 45 );
break; 
 case 43 : r= 
77566279 +( 226802 << 27 )+( 331 << 45 );
break; 
 case 44 : r= 
77792750 +( 226143 << 27 )+( 329 << 45 );
break; 
 case 45 : r= 
78018564 +( 225489 << 27 )+( 327 << 45 );
break; 
 case 46 : r= 
78243727 +( 224836 << 27 )+( 320 << 45 );
break; 
 case 47 : r= 
78468243 +( 224194 << 27 )+( 319 << 45 );
break; 
 case 48 : r= 
78692118 +( 223558 << 27 )+( 317 << 45 );
break; 
 case 49 : r= 
78915359 +( 222923 << 27 )+( 312 << 45 );
break; 
 case 50 : r= 
79137970 +( 222296 << 27 )+( 310 << 45 );
break; 
 case 51 : r= 
79359956 +( 221675 << 27 )+( 308 << 45 );
break; 
 case 52 : r= 
79581323 +( 221059 << 27 )+( 306 << 45 );
break; 
 case 53 : r= 
79802076 +( 220448 << 27 )+( 304 << 45 );
break; 
 case 54 : r= 
80022220 +( 219842 << 27 )+( 302 << 45 );
break; 
 case 55 : r= 
80241760 +( 219241 << 27 )+( 300 << 45 );
break; 
 case 56 : r= 
80460701 +( 218645 << 27 )+( 298 << 45 );
break; 
 case 57 : r= 
80679048 +( 218052 << 27 )+( 294 << 45 );
break; 
 case 58 : r= 
80896806 +( 217464 << 27 )+( 291 << 45 );
break; 
 case 59 : r= 
81113979 +( 216882 << 27 )+( 289 << 45 );
break; 
 case 60 : r= 
81330572 +( 216304 << 27 )+( 286 << 45 );
break; 
 case 61 : r= 
81546590 +( 215731 << 27 )+( 284 << 45 );
break; 
 case 62 : r= 
81762037 +( 215163 << 27 )+( 282 << 45 );
break; 
 case 63 : r= 
81976918 +( 214599 << 27 )+( 280 << 45 );
break; 
 case 64 : r= 
82191237 +( 214039 << 27 )+( 277 << 45 );
break; 
 case 65 : r= 
82404999 +( 213484 << 27 )+( 276 << 45 );
break; 
 case 66 : r= 
82618207 +( 212935 << 27 )+( 275 << 45 );
break; 
 case 67 : r= 
82830867 +( 212388 << 27 )+( 273 << 45 );
break; 
 case 68 : r= 
83042982 +( 211846 << 27 )+( 271 << 45 );
break; 
 case 69 : r= 
83254557 +( 211306 << 27 )+( 267 << 45 );
break; 
 case 70 : r= 
83465596 +( 210770 << 27 )+( 264 << 45 );
break; 
 case 71 : r= 
83676102 +( 210241 << 27 )+( 263 << 45 );
break; 
 case 72 : r= 
83886080 +( 209714 << 27 )+( 260 << 45 );
break; 
 case 73 : r= 
84095534 +( 209192 << 27 )+( 259 << 45 );
break; 
 case 74 : r= 
84304467 +( 208674 << 27 )+( 257 << 45 );
break; 
 case 75 : r= 
84512884 +( 208159 << 27 )+( 255 << 45 );
break; 
 case 76 : r= 
84720788 +( 207648 << 27 )+( 253 << 45 );
break; 
 case 77 : r= 
84928183 +( 207142 << 27 )+( 252 << 45 );
break; 
 case 78 : r= 
85135073 +( 206639 << 27 )+( 251 << 45 );
break; 
 case 79 : r= 
85341461 +( 206139 << 27 )+( 248 << 45 );
break; 
 case 80 : r= 
85547352 +( 205641 << 27 )+( 245 << 45 );
break; 
 case 81 : r= 
85752748 +( 205150 << 27 )+( 245 << 45 );
break; 
 case 82 : r= 
85957653 +( 204662 << 27 )+( 244 << 45 );
break; 
 case 83 : r= 
86162071 +( 204177 << 27 )+( 243 << 45 );
break; 
 case 84 : r= 
86366005 +( 203695 << 27 )+( 241 << 45 );
break; 
 case 85 : r= 
86569459 +( 203215 << 27 )+( 238 << 45 );
break; 
 case 86 : r= 
86772436 +( 202738 << 27 )+( 235 << 45 );
break; 
 case 87 : r= 
86974939 +( 202266 << 27 )+( 233 << 45 );
break; 
 case 88 : r= 
87176972 +( 201797 << 27 )+( 232 << 45 );
break; 
 case 89 : r= 
87378537 +( 201333 << 27 )+( 231 << 45 );
break; 
 case 90 : r= 
87579639 +( 200869 << 27 )+( 228 << 45 );
break; 
 case 91 : r= 
87780280 +( 200410 << 27 )+( 227 << 45 );
break; 
 case 92 : r= 
87980463 +( 199955 << 27 )+( 226 << 45 );
break; 
 case 93 : r= 
88180192 +( 199502 << 27 )+( 225 << 45 );
break; 
 case 94 : r= 
88379469 +( 199055 << 27 )+( 226 << 45 );
break; 
 case 95 : r= 
88578299 +( 198603 << 27 )+( 219 << 45 );
break; 
 case 96 : r= 
88776682 +( 198164 << 27 )+( 222 << 45 );
break; 
 case 97 : r= 
88974624 +( 197722 << 27 )+( 220 << 45 );
break; 
 case 98 : r= 
89172126 +( 197284 << 27 )+( 218 << 45 );
break; 
 case 99 : r= 
89369192 +( 196848 << 27 )+( 216 << 45 );
break; 
 case 100 : r= 
89565824 +( 196417 << 27 )+( 216 << 45 );
break; 
 case 101 : r= 
89762025 +( 195988 << 27 )+( 214 << 45 );
break; 
 case 102 : r= 
89957799 +( 195560 << 27 )+( 212 << 45 );
break; 
 case 103 : r= 
90153147 +( 195138 << 27 )+( 212 << 45 );
break; 
 case 104 : r= 
90348073 +( 194717 << 27 )+( 211 << 45 );
break; 
 case 105 : r= 
90542579 +( 194299 << 27 )+( 209 << 45 );
break; 
 case 106 : r= 
90736669 +( 193881 << 27 )+( 206 << 45 );
break; 
 case 107 : r= 
90930344 +( 193469 << 27 )+( 206 << 45 );
break; 
 case 108 : r= 
91123607 +( 193059 << 27 )+( 204 << 45 );
break; 
 case 109 : r= 
91316462 +( 192649 << 27 )+( 201 << 45 );
break; 
 case 110 : r= 
91508910 +( 192244 << 27 )+( 200 << 45 );
break; 
 case 111 : r= 
91700954 +( 191841 << 27 )+( 198 << 45 );
break; 
 case 112 : r= 
91892597 +( 191440 << 27 )+( 196 << 45 );
break; 
 case 113 : r= 
92083840 +( 191047 << 27 )+( 199 << 45 );
break; 
 case 114 : r= 
92274688 +( 190649 << 27 )+( 195 << 45 );
break; 
 case 115 : r= 
92465142 +( 190256 << 27 )+( 194 << 45 );
break; 
 case 116 : r= 
92655204 +( 189866 << 27 )+( 193 << 45 );
break; 
 case 117 : r= 
92844877 +( 189479 << 27 )+( 193 << 45 );
break; 
 case 118 : r= 
93034163 +( 189095 << 27 )+( 193 << 45 );
break; 
 case 119 : r= 
93223065 +( 188712 << 27 )+( 192 << 45 );
break; 
 case 120 : r= 
93411585 +( 188330 << 27 )+( 189 << 45 );
break; 
 case 121 : r= 
93599726 +( 187949 << 27 )+( 186 << 45 );
break; 
 case 122 : r= 
93787489 +( 187574 << 27 )+( 187 << 45 );
break; 
 case 123 : r= 
93974876 +( 187203 << 27 )+( 188 << 45 );
break; 
 case 124 : r= 
94161891 +( 186831 << 27 )+( 187 << 45 );
break; 
 case 125 : r= 
94348535 +( 186461 << 27 )+( 185 << 45 );
break; 
 case 126 : r= 
94534811 +( 186093 << 27 )+( 184 << 45 );
break; 
 case 127 : r= 
94720720 +( 185728 << 27 )+( 182 << 45 );
break; 
 case 128 : r= 
94906266 +( 185363 << 27 )+( 180 << 45 );
break; 
 case 129 : r= 
95276273 +( 184641 << 27 )+( 177 << 45 );
break; 
 case 130 : r= 
95644847 +( 183932 << 27 )+( 176 << 45 );
break; 
 case 131 : r= 
96012007 +( 183229 << 27 )+( 174 << 45 );
break; 
 case 132 : r= 
96377769 +( 182531 << 27 )+( 171 << 45 );
break; 
 case 133 : r= 
96742147 +( 181844 << 27 )+( 169 << 45 );
break; 
 case 134 : r= 
97105158 +( 181166 << 27 )+( 168 << 45 );
break; 
 case 135 : r= 
97466817 +( 180495 << 27 )+( 167 << 45 );
break; 
 case 136 : r= 
97827139 +( 179830 << 27 )+( 165 << 45 );
break; 
 case 137 : r= 
98186139 +( 179172 << 27 )+( 163 << 45 );
break; 
 case 138 : r= 
98543832 +( 178519 << 27 )+( 160 << 45 );
break; 
 case 139 : r= 
98900230 +( 177877 << 27 )+( 159 << 45 );
break; 
 case 140 : r= 
99255349 +( 177240 << 27 )+( 157 << 45 );
break; 
 case 141 : r= 
99609201 +( 176612 << 27 )+( 156 << 45 );
break; 
 case 142 : r= 
99961801 +( 175990 << 27 )+( 155 << 45 );
break; 
 case 143 : r= 
100313162 +( 175371 << 27 )+( 152 << 45 );
break; 
 case 144 : r= 
100663296 +( 174762 << 27 )+( 151 << 45 );
break; 
 case 145 : r= 
101012216 +( 174160 << 27 )+( 150 << 45 );
break; 
 case 146 : r= 
101359937 +( 173559 << 27 )+( 147 << 45 );
break; 
 case 147 : r= 
101706467 +( 172969 << 27 )+( 146 << 45 );
break; 
 case 148 : r= 
102051821 +( 172383 << 27 )+( 144 << 45 );
break; 
 case 149 : r= 
102396010 +( 171806 << 27 )+( 144 << 45 );
break; 
 case 150 : r= 
102739046 +( 171233 << 27 )+( 143 << 45 );
break; 
 case 151 : r= 
103080941 +( 170664 << 27 )+( 141 << 45 );
break; 
 case 152 : r= 
103421705 +( 170101 << 27 )+( 139 << 45 );
break; 
 case 153 : r= 
103761350 +( 169545 << 27 )+( 138 << 45 );
break; 
 case 154 : r= 
104099887 +( 168994 << 27 )+( 137 << 45 );
break; 
 case 155 : r= 
104437328 +( 168446 << 27 )+( 135 << 45 );
break; 
 case 156 : r= 
104773681 +( 167906 << 27 )+( 134 << 45 );
break; 
 case 157 : r= 
105108957 +( 167371 << 27 )+( 133 << 45 );
break; 
 case 158 : r= 
105443168 +( 166839 << 27 )+( 131 << 45 );
break; 
 case 159 : r= 
105776322 +( 166316 << 27 )+( 131 << 45 );
break; 
 case 160 : r= 
106108431 +( 165794 << 27 )+( 129 << 45 );
break; 
 case 161 : r= 
106439503 +( 165279 << 27 )+( 128 << 45 );
break; 
 case 162 : r= 
106769549 +( 164768 << 27 )+( 127 << 45 );
break; 
 case 163 : r= 
107098578 +( 164260 << 27 )+( 125 << 45 );
break; 
 case 164 : r= 
107426599 +( 163759 << 27 )+( 124 << 45 );
break; 
 case 165 : r= 
107753621 +( 163262 << 27 )+( 123 << 45 );
break; 
 case 166 : r= 
108079654 +( 162770 << 27 )+( 122 << 45 );
break; 
 case 167 : r= 
108404706 +( 162282 << 27 )+( 121 << 45 );
break; 
 case 168 : r= 
108728786 +( 161799 << 27 )+( 120 << 45 );
break; 
 case 169 : r= 
109051905 +( 161317 << 27 )+( 118 << 45 );
break; 
 case 170 : r= 
109374067 +( 160844 << 27 )+( 118 << 45 );
break; 
 case 171 : r= 
109695284 +( 160373 << 27 )+( 117 << 45 );
break; 
 case 172 : r= 
110015562 +( 159907 << 27 )+( 116 << 45 );
break; 
 case 173 : r= 
110334912 +( 159442 << 27 )+( 114 << 45 );
break; 
 case 174 : r= 
110653339 +( 158985 << 27 )+( 114 << 45 );
break; 
 case 175 : r= 
110970853 +( 158530 << 27 )+( 113 << 45 );
break; 
 case 176 : r= 
111287461 +( 158079 << 27 )+( 112 << 45 );
break; 
 case 177 : r= 
111603170 +( 157632 << 27 )+( 111 << 45 );
break; 
 case 178 : r= 
111917990 +( 157188 << 27 )+( 110 << 45 );
break; 
 case 179 : r= 
112231926 +( 156748 << 27 )+( 109 << 45 );
break; 
 case 180 : r= 
112544986 +( 156312 << 27 )+( 108 << 45 );
break; 
 case 181 : r= 
112857179 +( 155879 << 27 )+( 107 << 45 );
break; 
 case 182 : r= 
113168509 +( 155452 << 27 )+( 107 << 45 );
break; 
 case 183 : r= 
113478985 +( 155027 << 27 )+( 106 << 45 );
break; 
 case 184 : r= 
113788615 +( 154603 << 27 )+( 104 << 45 );
break; 
 case 185 : r= 
114097404 +( 154186 << 27 )+( 104 << 45 );
break; 
 case 186 : r= 
114405360 +( 153772 << 27 )+( 104 << 45 );
break; 
 case 187 : r= 
114712489 +( 153360 << 27 )+( 103 << 45 );
break; 
 case 188 : r= 
115018798 +( 152950 << 27 )+( 101 << 45 );
break; 
 case 189 : r= 
115324294 +( 152544 << 27 )+( 100 << 45 );
break; 
 case 190 : r= 
115628981 +( 152144 << 27 )+( 100 << 45 );
break; 
 case 191 : r= 
115932869 +( 151746 << 27 )+( 100 << 45 );
break; 
 case 192 : r= 
116235962 +( 151350 << 27 )+( 99 << 45 );
break; 
 case 193 : r= 
116538267 +( 150955 << 27 )+( 97 << 45 );
break; 
 case 194 : r= 
116839790 +( 150565 << 27 )+( 96 << 45 );
break; 
 case 195 : r= 
117140536 +( 150180 << 27 )+( 96 << 45 );
break; 
 case 196 : r= 
117440512 +( 149796 << 27 )+( 95 << 45 );
break; 
 case 197 : r= 
117739724 +( 149415 << 27 )+( 94 << 45 );
break; 
 case 198 : r= 
118038178 +( 149038 << 27 )+( 94 << 45 );
break; 
 case 199 : r= 
118335878 +( 148663 << 27 )+( 93 << 45 );
break; 
 case 200 : r= 
118632832 +( 148292 << 27 )+( 93 << 45 );
break; 
 case 201 : r= 
118929045 +( 147920 << 27 )+( 91 << 45 );
break; 
 case 202 : r= 
119224520 +( 147557 << 27 )+( 92 << 45 );
break; 
 case 203 : r= 
119519267 +( 147190 << 27 )+( 90 << 45 );
break; 
 case 204 : r= 
119813288 +( 146828 << 27 )+( 89 << 45 );
break; 
 case 205 : r= 
120106588 +( 146473 << 27 )+( 90 << 45 );
break; 
 case 206 : r= 
120399174 +( 146117 << 27 )+( 89 << 45 );
break; 
 case 207 : r= 
120691053 +( 145760 << 27 )+( 87 << 45 );
break; 
 case 208 : r= 
120982225 +( 145411 << 27 )+( 87 << 45 );
break; 
 case 209 : r= 
121272699 +( 145062 << 27 )+( 86 << 45 );
break; 
 case 210 : r= 
121562479 +( 144717 << 27 )+( 86 << 45 );
break; 
 case 211 : r= 
121851570 +( 144373 << 27 )+( 85 << 45 );
break; 
 case 212 : r= 
122139976 +( 144032 << 27 )+( 84 << 45 );
break; 
 case 213 : r= 
122427704 +( 143692 << 27 )+( 83 << 45 );
break; 
 case 214 : r= 
122714756 +( 143357 << 27 )+( 83 << 45 );
break; 
 case 215 : r= 
123001138 +( 143025 << 27 )+( 83 << 45 );
break; 
 case 216 : r= 
123286856 +( 142692 << 27 )+( 82 << 45 );
break; 
 case 217 : r= 
123571913 +( 142362 << 27 )+( 81 << 45 );
break; 
 case 218 : r= 
123856312 +( 142039 << 27 )+( 82 << 45 );
break; 
 case 219 : r= 
124140062 +( 141713 << 27 )+( 81 << 45 );
break; 
 case 220 : r= 
124423163 +( 141392 << 27 )+( 81 << 45 );
break; 
 case 221 : r= 
124705624 +( 141068 << 27 )+( 79 << 45 );
break; 
 case 222 : r= 
124987445 +( 140751 << 27 )+( 79 << 45 );
break; 
 case 223 : r= 
125268631 +( 140435 << 27 )+( 78 << 45 );
break; 
 case 224 : r= 
125549188 +( 140122 << 27 )+( 78 << 45 );
break; 
 case 225 : r= 
125829120 +( 139811 << 27 )+( 78 << 45 );
break; 
 case 226 : r= 
126108431 +( 139500 << 27 )+( 77 << 45 );
break; 
 case 227 : r= 
126387123 +( 139194 << 27 )+( 77 << 45 );
break; 
 case 228 : r= 
126665204 +( 138885 << 27 )+( 75 << 45 );
break; 
 case 229 : r= 
126942673 +( 138585 << 27 )+( 76 << 45 );
break; 
 case 230 : r= 
127219539 +( 138282 << 27 )+( 75 << 45 );
break; 
 case 231 : r= 
127495804 +( 137981 << 27 )+( 74 << 45 );
break; 
 case 232 : r= 
127771470 +( 137685 << 27 )+( 74 << 45 );
break; 
 case 233 : r= 
128046544 +( 137388 << 27 )+( 73 << 45 );
break; 
 case 234 : r= 
128321027 +( 137097 << 27 )+( 74 << 45 );
break; 
 case 235 : r= 
128594925 +( 136804 << 27 )+( 73 << 45 );
break; 
 case 236 : r= 
128868241 +( 136513 << 27 )+( 72 << 45 );
break; 
 case 237 : r= 
129140979 +( 136225 << 27 )+( 72 << 45 );
break; 
 case 238 : r= 
129413141 +( 135938 << 27 )+( 71 << 45 );
break; 
 case 239 : r= 
129684732 +( 135654 << 27 )+( 71 << 45 );
break; 
 case 240 : r= 
129955756 +( 135370 << 27 )+( 70 << 45 );
break; 
 case 241 : r= 
130226216 +( 135088 << 27 )+( 69 << 45 );
break; 
 case 242 : r= 
130496115 +( 134811 << 27 )+( 70 << 45 );
break; 
 case 243 : r= 
130765457 +( 134534 << 27 )+( 70 << 45 );
break; 
 case 244 : r= 
131034246 +( 134257 << 27 )+( 69 << 45 );
break; 
 case 245 : r= 
131302484 +( 133982 << 27 )+( 68 << 45 );
break; 
 case 246 : r= 
131570175 +( 133710 << 27 )+( 68 << 45 );
break; 
 case 247 : r= 
131837323 +( 133438 << 27 )+( 67 << 45 );
break; 
 case 248 : r= 
132103931 +( 133169 << 27 )+( 67 << 45 );
break; 
 case 249 : r= 
132370002 +( 132900 << 27 )+( 66 << 45 );
break; 
 case 250 : r= 
132635538 +( 132637 << 27 )+( 67 << 45 );
break; 
 case 251 : r= 
132900545 +( 132371 << 27 )+( 66 << 45 );
break; 
 case 252 : r= 
133165024 +( 132107 << 27 )+( 65 << 45 );
break; 
 case 253 : r= 
133428978 +( 131847 << 27 )+( 65 << 45 );
break; 
 case 254 : r= 
133692412 +( 131586 << 27 )+( 64 << 45 );
break; 
 case 255 : r= 
133955328 +( 131328 << 27 )+( 64 << 45 );
break;
default: r=0;
#endif 
  return r;
}



#if 0
int FirstInvTable::check_accuracy(int wF) {
  int i;
  mpz_class j;
  double x1,x2,y,e1,e2;
  double maxerror=0.0;
  double prod=0.0;

  maxMulOut=0;
  minMulOut=2;

  for (i=minIn; i<=maxIn; i++) {
    // x1 and x2 are respectively the smallest and largest FP possible
    // values leading to input i
    x1=input2double(i); 
    if(i>>(wIn-1)) //MSB of input
      x2= - negPowOf2(wF)          // <--wF --->
	+ ((double)(i+1+(1<<wIn))) //   11 11...11 (binary)
	/ ((double)(1<<(wIn+1))); // 0.11 11...11 (binary)
    else
      x2= - negPowOf2(wF-1) 
	+ ((double)(i+1+(1<<wIn))) //  10 11...11 (binary)
	/ ((double)(1<<(wIn))); // 1.0 11...11 (binary)
    j=function(i);
    y=output2double(j);
    if(verbose)
      cout << "i="<<i<< " ("<<input2double(i)<<") j="<<j
	   <<" min="<< x1*y <<" max="<< x2*y<< endl;
    prod=x1*y; if (prod<minMulOut) minMulOut=prod;
    prod=x2*y; if (prod>maxMulOut) maxMulOut=prod;
    e1= fabs(x1*y-1); if (e1>maxerror) maxerror=e1;
    e2= fabs(x2*y-1); if (e2>maxerror) maxerror=e2;
  } 
  cout << "FirstInvTable: Max error=" <<maxerror << "  log2=" << log2(maxerror) <<endl; 
  cout << "               minMulOut=" <<minMulOut << " maxMulOut=" <<maxMulOut  <<endl; 

  printf("%1.30e\n", log2(maxerror));

  return (int) (ceil(log2(maxerror)));
}
#endif
