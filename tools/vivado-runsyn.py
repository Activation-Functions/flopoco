##
################################################################################
##             Compilation and Result Generation script for Vivado
## This tool is part of  FloPoCo
## Author:  Florent de Dinechin, 2015
## All rights reserved
################################################################################
import os
import sys
import re
import string
import subprocess

def usage():
    print "Usage: \nvivado-runsyn\nvivado-runsyn file.vhdl\nvivado-runsyn file.vhdl entity\n" 
    sys.exit()
    
def get_last_entity(filename):
    vhdl=open(filename).read()
    endss = [match.end() for match in re.finditer("entity", vhdl)] # list of endpoints of match of "entity"
    last_entity_name_start = endss[-2] +1 # skip the space
    i = last_entity_name_start
    while(vhdl[i]!=" "):
        i=i+1
    last_entity_name_end = i
    entityname=vhdl[last_entity_name_start:last_entity_name_end]
    return entityname
    
#/* main */
if __name__ == '__main__':
    if (len(sys.argv)>3):
        usage()
        
    if (len(sys.argv)==3):
        filename = sys.argv[1] 
        entity = sys.argv[2] 
    elif (len(sys.argv)==2):
        filename=sys.argv[1]
        entity = get_last_entity(filename)
    elif (len(sys.argv)==1):
        filename="flopoco.vhdl"
        entity = get_last_entity(filename)

    workdir="/tmp/vivado_runsyn_files"
    project_name = "test_" + entity
    tcl_script_name = os.path.join(workdir, project_name+".tcl")
    filename_abs = os.path.abspath(filename)
    os.system("rm -R "+workdir)
    os.mkdir(workdir)
    os.chdir(workdir)
    tclscriptfile = open( tcl_script_name,"w")
    tclscriptfile.write("# Synthesis of " + entity + "\n")
    tclscriptfile.write("# Generated by FloPoCo's vivado-runsyn.py utility\n")
    tclscriptfile.write("create_project " + project_name + " -part xc7z020clg484-1\n")
    tclscriptfile.write("set_property board_part em.avnet.com:zed:part0:1.3 [current_project]\n")
    tclscriptfile.write("add_files -norecurse " + filename_abs + "\n")
    tclscriptfile.write("update_compile_order -fileset sources_1\n")
    tclscriptfile.write("update_compile_order -fileset sim_1\n")
    tclscriptfile.write("launch_runs impl_1\n")
    tclscriptfile.write("wait_on_run impl_1\n")
    tclscriptfile.close()
	
    vivado_command = ("vivado -mode batch -source " + tcl_script_name)
    print vivado_command
    os.system(vivado_command)

    utililization_report_file = workdir + "/" + project_name + ".runs/impl_1/" + entity + "_utilization_placed.rpt"
    print("cat " + utililization_report_file)
    os.system("cat " + utililization_report_file)
    
    
    
#    p = subprocess.Popen(vivado_command, stdin=subprocess.PIPE, stdout=subprocess.PIPE, stderr=subprocess.PIPE, close_fds=True)
