#				 Flopoco autocomplete file
#
#	If you don't know what to do with this file, please delete it and run
#			flopoco BuildAutocomplete

_mandatoryoptions_Fix2FP()
{
	echo " MSB LSB wE wF ";
}

_nonmandatoryoptions_Fix2FP()
{
	echo " signed ";
}

_optionvalues_Fix2FP()
{
	declare -A valueList
	valueList+=([signed]="0 1")
	echo ${valueList["$1"]}
}

_mandatoryoptions_FP2Fix()
{
	echo " wE wF MSB LSB ";
}

_nonmandatoryoptions_FP2Fix()
{
	echo " signed trunc ";
}

_optionvalues_FP2Fix()
{
	declare -A valueList
	valueList+=([signed]="0 1")
	valueList+=([trunc]="0 1")
	echo ${valueList["$1"]}
}

_mandatoryoptions_InputIEEE()
{
	echo " wEIn wFIn wEOut wFOut ";
}

_nonmandatoryoptions_InputIEEE()
{
	echo " ";
}

_optionvalues_InputIEEE()
{
	declare -A valueList
	echo ${valueList["$1"]}
}

_mandatoryoptions_OutputIEEE()
{
	echo " wEIn wFIn wEOut wFOut ";
}

_nonmandatoryoptions_OutputIEEE()
{
	echo " onlyPositiveZeroes ";
}

_optionvalues_OutputIEEE()
{
	declare -A valueList
	valueList+=([onlyPositiveZeroes]="0 1")
	echo ${valueList["$1"]}
}

_mandatoryoptions_Shifter()
{
	echo " wIn maxShift dir ";
}

_nonmandatoryoptions_Shifter()
{
	echo " ";
}

_optionvalues_Shifter()
{
	declare -A valueList
	valueList+=([dir]="0 1")
	echo ${valueList["$1"]}
}

_mandatoryoptions_LZOC()
{
	echo " wIn ";
}

_nonmandatoryoptions_LZOC()
{
	echo " ";
}

_optionvalues_LZOC()
{
	declare -A valueList
	echo ${valueList["$1"]}
}

_mandatoryoptions_LZOCShifterSticky()
{
	echo " wIn wOut wCount ";
}

_nonmandatoryoptions_LZOCShifterSticky()
{
	echo " computeSticky countType ";
}

_optionvalues_LZOCShifterSticky()
{
	declare -A valueList
	valueList+=([computeSticky]="0 1")
	echo ${valueList["$1"]}
}

_mandatoryoptions_IntAdder()
{
	echo " wIn ";
}

_nonmandatoryoptions_IntAdder()
{
	echo " arch optObjective SRL ";
}

_optionvalues_IntAdder()
{
	declare -A valueList
	valueList+=([SRL]="0 1")
	echo ${valueList["$1"]}
}

_mandatoryoptions_IntComparator()
{
	echo " wIn criteria constant constValue ";
}

_nonmandatoryoptions_IntComparator()
{
	echo " ";
}

_optionvalues_IntComparator()
{
	declare -A valueList
	valueList+=([constant]="0 1")
	echo ${valueList["$1"]}
}

_mandatoryoptions_IntDualSub()
{
	echo " wIn opType ";
}

_nonmandatoryoptions_IntDualSub()
{
	echo " ";
}

_optionvalues_IntDualSub()
{
	declare -A valueList
	echo ${valueList["$1"]}
}

_mandatoryoptions_IntMultiplier()
{
	echo " wX wY ";
}

_nonmandatoryoptions_IntMultiplier()
{
	echo " wOut signedIO superTile ";
}

_optionvalues_IntMultiplier()
{
	declare -A valueList
	valueList+=([signedIO]="0 1")
	valueList+=([superTile]="0 1")
	echo ${valueList["$1"]}
}

_mandatoryoptions_IntSquarer()
{
	echo " wIn ";
}

_nonmandatoryoptions_IntSquarer()
{
	echo " ";
}

_optionvalues_IntSquarer()
{
	declare -A valueList
	echo ${valueList["$1"]}
}

_mandatoryoptions_FPConstMult()
{
	echo " wE_in wF_in wE_out wF_out constant ";
}

_nonmandatoryoptions_FPConstMult()
{
	echo " cst_width ";
}

_optionvalues_FPConstMult()
{
	declare -A valueList
	echo ${valueList["$1"]}
}

_mandatoryoptions_FPConstMultRational()
{
	echo " wE_in wF_in wE_out wF_out a b ";
}

_nonmandatoryoptions_FPConstMultRational()
{
	echo " ";
}

_optionvalues_FPConstMultRational()
{
	declare -A valueList
	echo ${valueList["$1"]}
}

_mandatoryoptions_FPRealKCM()
{
	echo " wE wF constant ";
}

_nonmandatoryoptions_FPRealKCM()
{
	echo " ";
}

_optionvalues_FPRealKCM()
{
	declare -A valueList
	echo ${valueList["$1"]}
}

_mandatoryoptions_IntConstDiv()
{
	echo " wIn d ";
}

_nonmandatoryoptions_IntConstDiv()
{
	echo " alpha ";
}

_optionvalues_IntConstDiv()
{
	declare -A valueList
	echo ${valueList["$1"]}
}

_mandatoryoptions_IntConstRem()
{
	echo " wIn d ";
}

_nonmandatoryoptions_IntConstRem()
{
	echo " alpha ";
}

_optionvalues_IntConstRem()
{
	declare -A valueList
	echo ${valueList["$1"]}
}

_mandatoryoptions_FPConstDiv()
{
	echo " wE wF d ";
}

_nonmandatoryoptions_FPConstDiv()
{
	echo " dExp alpha ";
}

_optionvalues_FPConstDiv()
{
	declare -A valueList
	echo ${valueList["$1"]}
}

_mandatoryoptions_FixFunctionByTable()
{
	echo " f signedIn lsbIn msbOut lsbOut ";
}

_nonmandatoryoptions_FixFunctionByTable()
{
	echo " ";
}

_optionvalues_FixFunctionByTable()
{
	declare -A valueList
	valueList+=([signedIn]="0 1")
	echo ${valueList["$1"]}
}

_mandatoryoptions_FixFunctionBySimplePoly()
{
	echo " f lsbIn msbOut lsbOut ";
}

_nonmandatoryoptions_FixFunctionBySimplePoly()
{
	echo " signedIn ";
}

_optionvalues_FixFunctionBySimplePoly()
{
	declare -A valueList
	valueList+=([signedIn]="0 1")
	echo ${valueList["$1"]}
}

_mandatoryoptions_FixFunctionByPiecewisePoly()
{
	echo " f lsbIn msbOut lsbOut d ";
}

_nonmandatoryoptions_FixFunctionByPiecewisePoly()
{
	echo " approxErrorBudget ";
}

_optionvalues_FixFunctionByPiecewisePoly()
{
	declare -A valueList
	echo ${valueList["$1"]}
}

_mandatoryoptions_FixFunctionByMultipartiteTable()
{
	echo " f nbTables lsbIn msbOut lsbOut ";
}

_nonmandatoryoptions_FixFunctionByMultipartiteTable()
{
	echo " signedIn ";
}

_optionvalues_FixFunctionByMultipartiteTable()
{
	declare -A valueList
	valueList+=([signedIn]="0 1")
	echo ${valueList["$1"]}
}

_mandatoryoptions_BasicPolyApprox()
{
	echo " f targetAcc ";
}

_nonmandatoryoptions_BasicPolyApprox()
{
	echo " signedIn g ";
}

_optionvalues_BasicPolyApprox()
{
	declare -A valueList
	valueList+=([signedIn]="0 1")
	echo ${valueList["$1"]}
}

_mandatoryoptions_PiecewisePolyApprox()
{
	echo " f targetAcc d ";
}

_nonmandatoryoptions_PiecewisePolyApprox()
{
	echo " ";
}

_optionvalues_PiecewisePolyApprox()
{
	declare -A valueList
	echo ${valueList["$1"]}
}

_mandatoryoptions_FixRealKCM()
{
	echo " signedInput msbIn lsbIn lsbOut constant ";
}

_nonmandatoryoptions_FixRealKCM()
{
	echo " targetUlpError ";
}

_optionvalues_FixRealKCM()
{
	declare -A valueList
	valueList+=([signedInput]="0 1")
	echo ${valueList["$1"]}
}

_mandatoryoptions_TestBench()
{
	echo " ";
}

_nonmandatoryoptions_TestBench()
{
	echo " n file ";
}

_optionvalues_TestBench()
{
	declare -A valueList
	valueList+=([file]="0 1")
	echo ${valueList["$1"]}
}

_mandatoryoptions_Wrapper()
{
	echo " ";
}

_nonmandatoryoptions_Wrapper()
{
	echo " ";
}

_optionvalues_Wrapper()
{
	declare -A valueList
	echo ${valueList["$1"]}
}

_mandatoryoptions_FPAdd()
{
	echo " wE wF ";
}

_nonmandatoryoptions_FPAdd()
{
	echo " sub dualPath ";
}

_optionvalues_FPAdd()
{
	declare -A valueList
	valueList+=([sub]="0 1")
	valueList+=([dualPath]="0 1")
	echo ${valueList["$1"]}
}

_mandatoryoptions_FPAddSub()
{
	echo " wE wF ";
}

_nonmandatoryoptions_FPAddSub()
{
	echo " ";
}

_optionvalues_FPAddSub()
{
	declare -A valueList
	echo ${valueList["$1"]}
}

_mandatoryoptions_FPAddDualPath()
{
	echo " wE wF ";
}

_nonmandatoryoptions_FPAddDualPath()
{
	echo " ";
}

_optionvalues_FPAddDualPath()
{
	declare -A valueList
	echo ${valueList["$1"]}
}

_mandatoryoptions_FPAdd3Input()
{
	echo " wE wF ";
}

_nonmandatoryoptions_FPAdd3Input()
{
	echo " ";
}

_optionvalues_FPAdd3Input()
{
	declare -A valueList
	echo ${valueList["$1"]}
}

_mandatoryoptions_FPAddSInglePath()
{
	echo " wE wF ";
}

_nonmandatoryoptions_FPAddSInglePath()
{
	echo " ";
}

_optionvalues_FPAddSInglePath()
{
	declare -A valueList
	echo ${valueList["$1"]}
}

_mandatoryoptions_FPMult()
{
	echo " wE wF ";
}

_nonmandatoryoptions_FPMult()
{
	echo " wFout ";
}

_optionvalues_FPMult()
{
	declare -A valueList
	echo ${valueList["$1"]}
}

_mandatoryoptions_FPSquare()
{
	echo " wE wF_in wF_out ";
}

_nonmandatoryoptions_FPSquare()
{
	echo " ";
}

_optionvalues_FPSquare()
{
	declare -A valueList
	echo ${valueList["$1"]}
}

_mandatoryoptions_FPDiv()
{
	echo " wE wF ";
}

_nonmandatoryoptions_FPDiv()
{
	echo " radix ";
}

_optionvalues_FPDiv()
{
	declare -A valueList
	echo ${valueList["$1"]}
}

_mandatoryoptions_NbBitsMin()
{
	echo " radix digitSet ";
}

_nonmandatoryoptions_NbBitsMin()
{
	echo " ";
}

_optionvalues_NbBitsMin()
{
	declare -A valueList
	echo ${valueList["$1"]}
}

_mandatoryoptions_FPSqrt()
{
	echo " wE wF ";
}

_nonmandatoryoptions_FPSqrt()
{
	echo " ";
}

_optionvalues_FPSqrt()
{
	declare -A valueList
	echo ${valueList["$1"]}
}

_mandatoryoptions_FPLargeAcc()
{
	echo " wEX wFX MaxMSBX MSBA LSBA ";
}

_nonmandatoryoptions_FPLargeAcc()
{
	echo " ";
}

_optionvalues_FPLargeAcc()
{
	declare -A valueList
	echo ${valueList["$1"]}
}

_mandatoryoptions_LargeAccToFP()
{
	echo " wE_out wF_out MSBA LSBA ";
}

_nonmandatoryoptions_LargeAccToFP()
{
	echo " ";
}

_optionvalues_LargeAccToFP()
{
	declare -A valueList
	echo ${valueList["$1"]}
}

_mandatoryoptions_FPDotProduct()
{
	echo " wE wFX wFY MaxMSBX MSBA LSBA ";
}

_nonmandatoryoptions_FPDotProduct()
{
	echo " ";
}

_optionvalues_FPDotProduct()
{
	declare -A valueList
	echo ${valueList["$1"]}
}

_mandatoryoptions_FPExp()
{
	echo " wE wF ";
}

_nonmandatoryoptions_FPExp()
{
	echo " d k g ";
}

_optionvalues_FPExp()
{
	declare -A valueList
	echo ${valueList["$1"]}
}

_mandatoryoptions_FPLog()
{
	echo " wE wF ";
}

_nonmandatoryoptions_FPLog()
{
	echo " inTableSize ";
}

_optionvalues_FPLog()
{
	declare -A valueList
	echo ${valueList["$1"]}
}

_mandatoryoptions_FPPow()
{
	echo " wE wF ";
}

_nonmandatoryoptions_FPPow()
{
	echo " logSizeTable expTableSize expDegree ";
}

_optionvalues_FPPow()
{
	declare -A valueList
	echo ${valueList["$1"]}
}

_mandatoryoptions_FixSinCos()
{
	echo " lsb ";
}

_nonmandatoryoptions_FixSinCos()
{
	echo " ";
}

_optionvalues_FixSinCos()
{
	declare -A valueList
	echo ${valueList["$1"]}
}

_mandatoryoptions_CordicSinCos()
{
	echo " lsb ";
}

_nonmandatoryoptions_CordicSinCos()
{
	echo " reducedIterations ";
}

_optionvalues_CordicSinCos()
{
	declare -A valueList
	echo ${valueList["$1"]}
}

_mandatoryoptions_FixAtan2()
{
	echo " lsb method ";
}

_nonmandatoryoptions_FixAtan2()
{
	echo " ";
}

_optionvalues_FixAtan2()
{
	declare -A valueList
	echo ${valueList["$1"]}
}

_mandatoryoptions_FixFIR()
{
	echo " lsbInOut coeff ";
}

_nonmandatoryoptions_FixFIR()
{
	echo " rescale ";
}

_optionvalues_FixFIR()
{
	declare -A valueList
	valueList+=([rescale]="0 1")
	echo ${valueList["$1"]}
}

_mandatoryoptions_FixSOPC()
{
	echo " lsbIn lsbOut coeff ";
}

_nonmandatoryoptions_FixSOPC()
{
	echo " ";
}

_optionvalues_FixSOPC()
{
	declare -A valueList
	echo ${valueList["$1"]}
}

_mandatoryoptions_FixIIR()
{
	echo " lsbIn msbOut lsbOut coeffa coeffb ";
}

_nonmandatoryoptions_FixIIR()
{
	echo " h ";
}

_optionvalues_FixIIR()
{
	declare -A valueList
	echo ${valueList["$1"]}
}

_mandatoryoptions_TargetModel()
{
	echo " ";
}

_nonmandatoryoptions_TargetModel()
{
	echo " type ";
}

_optionvalues_TargetModel()
{
	declare -A valueList
	echo ${valueList["$1"]}
}

_mandatoryoptions_UserDefinedOperator()
{
	echo " param1 ";
}

_nonmandatoryoptions_UserDefinedOperator()
{
	echo " param0 ";
}

_optionvalues_UserDefinedOperator()
{
	declare -A valueList
	echo ${valueList["$1"]}
}

# echo the name of the last operator name on the line
_getLastOp ()
{
	local opList reponse pipedOpList
	opList="Fix2FP FP2Fix InputIEEE OutputIEEE Shifter LZOC LZOCShifterSticky IntAdder IntComparator IntDualSub IntMultiplier IntSquarer FPConstMult FPConstMultRational FPRealKCM IntConstDiv IntConstRem FPConstDiv FixFunctionByTable FixFunctionBySimplePoly FixFunctionByPiecewisePoly FixFunctionByMultipartiteTable BasicPolyApprox PiecewisePolyApprox FixRealKCM TestBench Wrapper FPAdd FPAddSub FPAddDualPath FPAdd3Input FPAddSInglePath FPMult FPSquare FPDiv NbBitsMin FPSqrt FPLargeAcc LargeAccToFP FPDotProduct FPExp FPLog FPPow FixSinCos CordicSinCos FixAtan2 FixFIR FixSOPC FixIIR TargetModel UserDefinedOperator  BuildHTMLDoc BuildAutocomplete";
	pipedOpList="@(${opList// /|})"
	reponse=""

	for i in $1; do
		case $i in
			$pipedOpList ) reponse=$i;;
		esac
	done
	echo $reponse
}

_mandatoryoptions_()
{
	echo ''
}

_nonmandatoryoptions_()
{
	echo ' pipeline clockEnable plainVHDL generateFigures  name outputFile hardMultThreshold frequency verbose target '
}

_optionvalues_()
{
	declare -A optionmap
	optionmap+=(['pipeline']="0 1 ")
	optionmap+=(['clockEnable']="0 1 ")
	optionmap+=(['plainVHDL']="0 1 ")
	optionmap+=(['generateFigures']="0 1 ")
	optionmap+=(['']="0 1 ")
	optionmap+=(['verbose']="0 1 2 ")
	optionmap+=(['target']="virtex4 virtex5 virtex6 spartan3 stratix2 stratix3 stratix4 stratix5 cyclone2 cyclone3 cyclone4 cyclone5 ")
	echo ${optionmap[$1]}
}

_exclude_lists()
{
	local response="" tmpbuf tmpbuf2 len1 len2
	tmpbuf2=" $2 "
	len2=${#tmpbuf2}
	for item in $1 ; do
	tmpbuf=${tmpbuf2/ $item /}
	len1=${#tmpbuf}
		if (( $len1 == $len2 )) ; then
			response="$response $item"
		fi
	done
	echo $response
}

_flopoco()
{
	shopt -s extglob
	local saisie lastOp=""
	
	#récupération de la ligne
	saisie=$COMP_LINE

	lastOp=`_getLastOp "$saisie"`

	#Si l'opérateur est une cible foinale on s'arrête
	spetrgtlst="BuildHTMLDoc BuildAutocomplete"
	case $lastOp in
		@(${spetrgtlst// /|}) ) return ;;
	esac

	#On ne s'intéresse qu'à ce qui se situe après l'opérateur'
	if [ -z "$lastOp" ] ; then
		saisie=${saisie##*${1}}
	else
		saisie=${saisie##*${lastOp}}
	fi
	
	local optionset=""
	local currentOpt=""
	local currentValue=""
	local remaininglength="1"
	local -i beforeEqual=0

	for wordgroup in $saisie ; do
		beforeEqual=0
		currentOpt=${wordgroup%%=*}
		currentValue=${wordgroup#*=}
		optionset="$optionset $currentOpt"
		local buf=${saisie##*$wordgroup}
		remaininglength=${#buf}
		if [ "$currentOpt" != "$wordgroup" ] ; then
			beforeEqual=1
		fi
	done

	if [ "$remaininglength" -gt 0 ] ; then
		beforeEqual=0
		currentOpt=""
	fi

	# possible set
	local mopts nmopts nextOps

	# allowed set
	local amopts anmopts anextOps

	amopts=`_mandatoryoptions_$lastOp`
	anmopts=`_nonmandatoryoptions_$lastOp`
	anextOps="Fix2FP FP2Fix InputIEEE OutputIEEE Shifter LZOC LZOCShifterSticky IntAdder IntComparator IntDualSub IntMultiplier IntSquarer FPConstMult FPConstMultRational FPRealKCM IntConstDiv IntConstRem FPConstDiv FixFunctionByTable FixFunctionBySimplePoly FixFunctionByPiecewisePoly FixFunctionByMultipartiteTable BasicPolyApprox PiecewisePolyApprox FixRealKCM TestBench Wrapper FPAdd FPAddSub FPAddDualPath FPAdd3Input FPAddSInglePath FPMult FPSquare FPDiv NbBitsMin FPSqrt FPLargeAcc LargeAccToFP FPDotProduct FPExp FPLog FPPow FixSinCos CordicSinCos FixAtan2 FixFIR FixSOPC FixIIR TargetModel UserDefinedOperator "

	if [ -z "$lastOp" ] ; then
		anextOps="$anextOps $spetrgtlst"
	fi

	mopts=`_exclude_lists "$amopts" "$optionset" `
	case $currentOpt in
	@(${amopts// /|})) mopts="$mopts $currentOpt";;
	esac

	nmopts=`_exclude_lists "$anmopts" "$optionset" `
	case $currentOpt in
	@(${anmopts// /|})) nmopts="$nmopts $currentOpt";;
	esac
	local optionslist="$mopts $nmopts"
	optionslist=${optionslist// /|}

	#if we have no mandatory options left
	if [ -z "${mopts// /}" ] ; then
		nextOps=$anextOps
	fi

	#if we are beginning a new word or completing name
	if [ "$beforeEqual" -eq 0 ] ; then
		#echo "Completing new word"
		local -i candidatecounter=0
		for candidate in $mopts $nmopts $nextOps ; do
			case $candidate in
			$currentOpt*)
				COMPREPLY+=("$candidate")
				((candidatecounter++))
				;;
			esac
		done
		if (( candidatecounter == 1 )) ; then
			#echo "only one candidate"
			case ${COMPREPLY[0]} in
			@($optionslist))
				#echo "candidate is option"
				compopt -o nospace
				COMPREPLY[0]="${COMPREPLY[0]}=";;
			esac
		fi
		return
	fi

	#we are completing option value
	#echo "completing option value"
	local availableValues=`_optionvalues_$lastOp $currentOpt`
	for value in $availableValues ; do
		case $value in
		$currentValue*) COMPREPLY+=("$value");;
		esac
	done
}

# Actual comlpetion
complete -F _flopoco flopoco
