Entity QuadraticEquation { 

# Declare parameters wE and wF

Parameter wE = 17;
Parameter wF = 7; 


# Declare operators you will use, as well as operator parameters
# The same operator may be used several times, instances will have the operator name and append a unique id

Operator Mul  : FPMult wE = $wE wF = $wF;
Operator Square: FPMult  wE = $wE wF = $wF; # to replace with a squarer
Operator Mul4  : FPConstMult constant=4 wE = $wE wF = $wF ; 
Operator Mul2  : FPConstMult constant=2	 wE = $wE wF = $wF ; 
Operator Add   : FPAdd wE = $wE wF = $wF;
Operator Sub   : FPAdd wE = $wE wF = $wF sub=1;
Operator Div   : FPDiv wE = $wE wF = $wF;
Operator Sqrt   : FPSqrt wE = $wE wF = $wF;

# Declare I/O Signals

Input A, B, C;
Output mX1, X2;

# Assemble the operators
# the following is the tree version of b*b-4*a*c
Delta  <= Sub(Square(B, B),  Mul4(Mul(A,C)));
SqrtDelta <= Sqrt(Delta); 
TwoA <= Mul2(A);
TwoACopy <= TwoA;
mX1 <= Div(Add(B, SqrtDelta), TwoA);  # -(b+sqrt(delta))/2a
X2  <= Div(Sub(SqrtDelta, B), TwoACopy);  # -b+sqrt(delta)/2a -- the copy is useless, just to test that signal copy works.
# Seems we miss a Neg operator, or an option to FPAdd. So wrong formula, we output -X1 but never mind
}
